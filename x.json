{
  "name": "string",
  "description": "String manipulation for ChiÏ‡",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/string.git"
  },
  "dependencies": {
    "underscore.string": "2.x.x"
  },
  "nodes": [
    {
      "name": "append",
      "ns": "string",
      "description": "Appends a string to an other string",
      "phrases": {
        "active": "Appending string"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "required": true
          },
          "append": {
            "title": "Other String",
            "type": "string",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "fn": "output.out = $.create($.in + $.append)\n"
    },
    {
      "name": "camelize",
      "ns": "string",
      "async": true,
      "description": "Converts underscored or dasherized string to a camelized one. Begins with a lower case letter unless it starts with an underscore or string",
      "phrases": {
        "active": "Camelizing string"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.camelize($.in)) });\n};\n"
    },
    {
      "name": "capitalize",
      "ns": "string",
      "async": true,
      "description": "Capitalize a string",
      "phrases": {
        "active": "Capitalizing string"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.capitalize($.in)) });\n};\n"
    },
    {
      "name": "chars",
      "ns": "string",
      "async": true,
      "description": "Return the chars within a string",
      "phrases": {
        "active": "Converting to chars"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.chars($.in)) });\n};\n"
    },
    {
      "name": "chop",
      "ns": "string",
      "async": true,
      "description": "Chop a string in equal parts.",
      "phrases": {
        "active": "Chopping string"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          },
          "step": {
            "title": "Step",
            "type": "number",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.chop($.in, $.step)) });\n};\n"
    },
    {
      "name": "classify",
      "ns": "string",
      "async": true,
      "description": "Converts string to camelized class name. First letter is always upper case",
      "phrases": {
        "active": "Classifying string"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.classify($.in)) });\n};\n"
    },
    {
      "name": "clean",
      "ns": "string",
      "async": true,
      "description": "Compress to single whitespaces",
      "phrases": {
        "active": "Cleaning whitespace"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.clean($.in)) });\n};\n"
    },
    {
      "name": "concat",
      "ns": "string",
      "description": "Combines the text of two or more strings and returns a new string.",
      "phrases": {
        "active": "Concatenating string"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String Parts",
            "type": "array"
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "fn": "output.out = $.write('in', String.prototype.concat.apply($.in));\n"
    },
    {
      "name": "count",
      "ns": "string",
      "async": true,
      "description": "Counts the number occurances of a string within another string",
      "phrases": {
        "active": "Capitalizing string"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          },
          "substring": {
            "title": "Sub String",
            "type": "string",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.count($.in, $.substring)) });\n};\n"
    },
    {
      "name": "dasherize",
      "ns": "string",
      "async": true,
      "description": "Converts a underscored or camelized string into an dasherized one",
      "phrases": {
        "active": "Dasherizing string"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.dasherize($.in)) });\n};\n"
    },
    {
      "name": "endsWith",
      "ns": "string",
      "async": true,
      "description": "Checks whether a string ends with substring",
      "phrases": {
        "active": "Determining whether string ends with {{input.substring}}"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          },
          "substring": {
            "title": "Substring",
            "type": "string",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.endsWith($.in, $.substring)) });\n};\n"
    },
    {
      "name": "escapeHTML",
      "ns": "string",
      "async": true,
      "description": "Converts HTML special characters to their entity equivalents",
      "phrases": {
        "active": "Escaping HTML"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.escapeHTML($.in)) });\n};\n"
    },
    {
      "name": "humanize",
      "ns": "string",
      "async": true,
      "description": "Converts an underscored, camelized, or dasherized string into a humanized one. Also removes beginning and ending whitespace, and removes the postfix '_id'.",
      "phrases": {
        "active": "Humanizing string"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.humanize($.in)) });\n};\n"
    },
    {
      "name": "include",
      "ns": "string",
      "async": true,
      "description": "Indicates whether a string includes another string",
      "phrases": {
        "active": "Determining string inclusion"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          },
          "include": {
            "title": "Include",
            "type": "string",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.include($.in, $.include)) });\n};\n"
    },
    {
      "name": "capitalize",
      "ns": "string",
      "async": true,
      "description": "Capitalize a string",
      "phrases": {
        "active": "Capitalizing string"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.capitalize($.in)) });\n};\n"
    },
    {
      "name": "isBlank",
      "ns": "string",
      "async": true,
      "description": "Determines whether a string is blank (whitespace, new line, etc.)",
      "phrases": {
        "active": "Checking for blank string"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.isBlank($.in)) });\n};\n"
    },
    {
      "name": "insert",
      "ns": "string",
      "description": "Inserts a substring at the index given",
      "phrases": {
        "active": "Inserting substring"
      },
      "async": true,
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          },
          "index": {
            "title": "Index",
            "type": "number",
            "required": true
          },
          "substring": {
            "title": "Substring",
            "type": "string",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "Distance",
            "type": "number"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({out: $.write('in', underscore_string.insert($.in, $.index, $.substring))});\n};\n"
    },
    {
      "name": "lines",
      "ns": "string",
      "async": true,
      "description": "Splits a string by line breaks",
      "phrases": {
        "active": "Splitting string into seperate lines"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.lines($.in)) });\n};\n"
    },
    {
      "name": "prune",
      "ns": "string",
      "async": true,
      "description": "Elegant version of truncate. Makes sure the pruned string does not exceed the original length. Avoid half-chopped words when truncating.",
      "phrases": {
        "active": "Pruning string to a length of {{input.length}}"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          },
          "length": {
            "title": "Length",
            "type": "number",
            "required": true
          },
          "prune": {
            "title": "Prune string",
            "type": "string",
            "default": "..."
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.prune($.in, $.length, $.prune)) });\n};\n"
    },
    {
      "name": "regexp",
      "ns": "string",
      "description": "Execute a regular expression",
      "phrases": {
        "active": "RegExping {{input.regexp}} {{input.flags}}"
      },
      "ports": {
        "input": {
          "in": {
            "type": "string",
            "title": "Data",
            "required": true
          },
          "regexp": {
            "type": "string",
            "title": "A Regular Expression",
            "required": true
          },
          "flags": {
            "type": "string",
            "title": "Flags",
            "default": "g"
          }
        },
        "output": {
          "out": {
            "type": "array",
            "title": "Results"
          },
          "error": {
            "type": "object",
            "title": "Error"
          }
        }
      },
      "fn": "output = function(cb) {\n  var r = new RegExp($.regexp, $.flags);\n  var res = $.in.match(r);\n  if(res) {\n    cb({ out: $.create(res) });\n    done();\n  } else {\n    cb({ error: $.create(new Error('Could not match: ' + $.regexp )) });\n    done();\n  }\n};\n"
    },
    {
      "name": "replace",
      "ns": "string",
      "description": "Replaces a string within another string",
      "phrases": {
        "active": "Replacing string"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "required": true
          },
          "match": {
            "title": "Match",
            "type": "string",
            "required": true
          },
          "replace": {
            "title": "Replacement",
            "type": "string",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "fn": "var r = new RegExp($.match, 'g');\noutput.out = $.write('in', $.in.replace(r, $.replace))\n"
    },
    {
      "name": "reverse",
      "ns": "string",
      "async": true,
      "description": "Reverses the string",
      "phrases": {
        "active": "Reversing string"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.reverse($.in)) });\n};\n"
    },
    {
      "name": "slugify",
      "ns": "string",
      "async": true,
      "description": "Transform text into a URL slug. Replaces whitespaces, accentuated, and special characters with a dash.",
      "phrases": {
        "active": "Slugifying string"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.slugify($.in)) });\n};\n"
    },
    {
      "name": "splice",
      "ns": "string",
      "async": true,
      "description": "Replaces part of a string by index number and length",
      "phrases": {
        "active": "Splicing string"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          },
          "index": {
            "title": "Index",
            "type": "number",
            "required": true
          },
          "length": {
            "title": "Length",
            "type": "number",
            "required": true
          },
          "substring": {
            "title": "Substring",
            "type": "string",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.splice($.in, $.index, $.length, $.substring)) });\n};\n"
    },
    {
      "name": "split",
      "ns": "string",
      "description": "Splits a String object into an array of strings by separating the string into substrings.",
      "phrases": {
        "active": "Splitting string"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "required": true
          },
          "seperator": {
            "title": "Seperator",
            "type": "string",
            "description": "Specifies the character(s) to use for separating the string. The separator is treated as a string or a regular expression. If separator is omitted, the array returned contains one element consisting of the entire string. If separator is an empty string, str is converted to an array of characters.",
            "required": true,
            "default": null
          },
          "regexp": {
            "title": "Regular Expression",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "out": {
            "title": "String parts",
            "type": "array"
          },
          "error": {
            "title": "Error",
            "type": "object"
          }
        }
      },
      "fn": "output = function(cb) {\n  try {\n    if($.regexp) {\n      var m = $.regexp.match(/^\\/(.*)\\/([gmi]*)/);\n      if(m.length === 3) {\n        var re = new RegExp(m[1], m[2]);\n        cb({ out: $.write('in', $.in.split(re)) });\n      } else {\n        cb({ error: $.create(new Error(['RegExp not recognized:', $.regexp, 'required format: /..../gm' ].join(' '))) });\n      }\n    } else if($.seperator) {\n      cb({ out: $.write('in', $.in.split($.seperator)) });\n    } else {\n      cb({ error: $.create(Error('no input seperator or regexp')) });\n    }\n\n    done();\n\n  } catch(err) {\n    cb({ error: $.create(err) });\n    done();\n  }\n\n};\n"
    },
    {
      "name": "startsWith",
      "ns": "string",
      "async": true,
      "description": "Checks whether a string starts with substring",
      "phrases": {
        "active": "Determining whether string starts with {{input.substring}}"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          },
          "substring": {
            "title": "Substring",
            "type": "string",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.startsWith($.in, $.substring)) });\n};\n"
    },
    {
      "name": "succ",
      "ns": "string",
      "async": true,
      "description": "Outputs the successor of this string",
      "phrases": {
        "active": "Getting successor"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.succ($.in)) });\n};\n"
    },
    {
      "name": "swapCase",
      "ns": "string",
      "async": true,
      "description": "Swap the case of all case-based characters",
      "phrases": {
        "active": "Swapping case-based characters"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.swapCase($.in)) });\n};\n"
    },
    {
      "name": "titleize",
      "ns": "string",
      "async": true,
      "description": "Titleize a string",
      "phrases": {
        "active": "Titleizing string"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.titleize($.in)) });\n};\n"
    },
    {
      "name": "toLowerCase",
      "ns": "string",
      "async": true,
      "description": "Convert string to lowercase",
      "phrases": {
        "active": "Lowercasing string"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', $.in.toLowerCase()) });\n};\n"
    },
    {
      "name": "toUpperCase",
      "ns": "string",
      "async": true,
      "description": "Convert string to uppercase",
      "phrases": {
        "active": "Uppercasing string"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', $.in.toUpperCase()) });\n};\n"
    },
    {
      "name": "trim",
      "ns": "string",
      "async": true,
      "description": "trims defined characters from begining and ending of the string. Defaults to whitespace characters.",
      "phrases": {
        "active": "Trimming string"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          },
          "chars": {
            "title": "Characters",
            "type": "string",
            "default": " ",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.trim($.in, $.chars)) });\n};\n"
    },
    {
      "name": "truncate",
      "ns": "string",
      "async": true,
      "description": "Truncate a string to the length specified",
      "phrases": {
        "active": "Truncating string to a length of {{input.length}}"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          },
          "length": {
            "title": "Length",
            "type": "number",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.truncate($.in, $.length)) });\n};\n"
    },
    {
      "name": "underscored",
      "ns": "string",
      "async": true,
      "description": "Converts a camelized or dasherized string into an underscored one",
      "phrases": {
        "active": "Underscoring string"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.underscore($.in)) });\n};\n"
    },
    {
      "name": "unescapeHTML",
      "ns": "string",
      "async": true,
      "description": "Converts entity characters to HTML equivalents",
      "phrases": {
        "active": "Unescaping HTML"
      },
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore.string": "2.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({ out: $.write('in', underscore_string.unescapeHTML($.in)) });\n};\n"
    }
  ]
}