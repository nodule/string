{
  "name": "string",
  "description": "String manipulation for ChiÏ‡",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/string.git"
  },
  "dependencies": {
    "underscore.string": "2.x.x"
  },
  "nodes": [
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "required": true
          },
          "append": {
            "title": "Other String",
            "type": "string",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "phrases": {
        "active": "Appending string"
      },
      "description": "Appends a string to an other string",
      "ns": "string",
      "name": "append",
      "fn": "output.out = input.in + input.append\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Camelizing string"
      },
      "description": "Converts underscored or dasherized string to a camelized one. Begins with a lower case letter unless it starts with an underscore or string",
      "async": true,
      "ns": "string",
      "name": "camelize",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.camelize(data) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Capitalizing string"
      },
      "description": "Capitalize a string",
      "async": true,
      "ns": "string",
      "name": "capitalize",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.capitalize(data) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Converting to chars"
      },
      "description": "Return the chars within a string",
      "async": true,
      "ns": "string",
      "name": "chars",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.chars(data) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          },
          "step": {
            "title": "Step",
            "type": "number",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Chopping string"
      },
      "description": "Chop a string in equal parts.",
      "async": true,
      "ns": "string",
      "name": "chop",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.chop(data, input.step) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Classifying string"
      },
      "description": "Converts string to camelized class name. First letter is always upper case",
      "async": true,
      "ns": "string",
      "name": "classify",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.classify(data) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Cleaning whitespace"
      },
      "description": "Compress to single whitespaces",
      "async": true,
      "ns": "string",
      "name": "clean",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.clean(data) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String Parts",
            "type": "array",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "phrases": {
        "active": "Concatenating string"
      },
      "description": "Combines the text of two or more strings and returns a new string.",
      "ns": "string",
      "name": "concat",
      "fn": "output.out = input.string.concat.apply(null, input.in )\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          },
          "substring": {
            "title": "Sub String",
            "type": "string",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Capitalizing string"
      },
      "description": "Counts the number occurances of a string within another string",
      "async": true,
      "ns": "string",
      "name": "count",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.count(data, input.substring) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Dasherizing string"
      },
      "description": "Converts a underscored or camelized string into an dasherized one",
      "async": true,
      "ns": "string",
      "name": "dasherize",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.dasherize(data) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          },
          "substring": {
            "title": "Substring",
            "type": "string",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Determining whether string ends with {{input.substring}}"
      },
      "description": "Checks whether a string ends with substring",
      "async": true,
      "ns": "string",
      "name": "endsWith",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.endsWith(data, input.substring) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Escaping HTML"
      },
      "description": "Converts HTML special characters to their entity equivalents",
      "async": true,
      "ns": "string",
      "name": "escapeHTML",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.escapeHTML(data) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Humanizing string"
      },
      "description": "Converts an underscored, camelized, or dasherized string into a humanized one. Also removes beginning and ending whitespace, and removes the postfix '_id'.",
      "async": true,
      "ns": "string",
      "name": "humanize",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.humanize(data) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          },
          "include": {
            "title": "Include",
            "type": "string",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Determining string inclusion"
      },
      "description": "Indicates whether a string includes another string",
      "async": true,
      "ns": "string",
      "name": "include",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.include(data, input.include) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Capitalizing string"
      },
      "description": "Capitalize a string",
      "async": true,
      "ns": "string",
      "name": "capitalize",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.capitalize(data) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Checking for blank string"
      },
      "description": "Determines whether a string is blank (whitespace, new line, etc.)",
      "async": true,
      "ns": "string",
      "name": "isBlank",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.isBlank(data) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          },
          "index": {
            "title": "Index",
            "type": "number",
            "required": true
          },
          "substring": {
            "title": "Substring",
            "type": "string",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "Distance",
            "type": "number"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "async": true,
      "phrases": {
        "active": "Inserting substring"
      },
      "description": "Inserts a substring at the index given",
      "ns": "string",
      "name": "insert",
      "fn": "on.input.in = function() {\n  underscore_string.insert(data, input.index, input.substring);\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Splitting string into seperate lines"
      },
      "description": "Splits a string by line breaks",
      "async": true,
      "ns": "string",
      "name": "lines",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.lines(data) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          },
          "length": {
            "title": "Length",
            "type": "number",
            "required": true
          },
          "prune": {
            "title": "Prune string",
            "type": "string",
            "default": "..."
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Pruning string to a length of {{input.length}}"
      },
      "description": "Elegant version of truncate. Makes sure the pruned string does not exceed the original length. Avoid half-chopped words when truncating.",
      "async": true,
      "ns": "string",
      "name": "prune",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.prune(data, input.length, input.prune) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "type": "string",
            "title": "Data",
            "required": true
          },
          "regexp": {
            "type": "string",
            "title": "A Regular Expression",
            "required": true
          },
          "flags": {
            "type": "string",
            "title": "Flags",
            "default": "g"
          }
        },
        "output": {
          "out": {
            "type": "array",
            "title": "Results"
          },
          "error": {
            "type": "object",
            "title": "Error"
          }
        }
      },
      "phrases": {
        "active": "RegExping {{input.regexp}} {{input.flags}}"
      },
      "description": "Execute a regular expression",
      "ns": "string",
      "name": "regexp",
      "fn": "output = function(cb) {\n\n  var r = new RegExp(input.regexp, input.flags);\n  var res = input.in.match(r);\n  if(res) {\n    cb({ out: res });\n    done();\n  } else {\n    cb({ error: new Error('Could not match: ' + input.regexp ) });\n    done();\n  }\n\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "required": true
          },
          "match": {
            "title": "Match",
            "type": "string",
            "required": true
          },
          "replace": {
            "title": "Replacement",
            "type": "string",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "phrases": {
        "active": "Replacing string"
      },
      "description": "Replaces a string within another string",
      "ns": "string",
      "name": "replace",
      "fn": "var r = new RegExp(input.match, 'g');\noutput.out = input.in.replace(r, input.replace)\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Reversing string"
      },
      "description": "Reverses the string",
      "async": true,
      "ns": "string",
      "name": "reverse",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.reverse(data) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Slugifying string"
      },
      "description": "Transform text into a URL slug. Replaces whitespaces, accentuated, and special characters with a dash.",
      "async": true,
      "ns": "string",
      "name": "slugify",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.slugify(data) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          },
          "index": {
            "title": "Index",
            "type": "number",
            "required": true
          },
          "length": {
            "title": "Length",
            "type": "number",
            "required": true
          },
          "substring": {
            "title": "Substring",
            "type": "string",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Splicing string"
      },
      "description": "Replaces part of a string by index number and length",
      "async": true,
      "ns": "string",
      "name": "splice",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.splice(data, input.index, input.length, input.substring) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "required": true
          },
          "seperator": {
            "title": "Seperator",
            "type": "string",
            "description": "Specifies the character(s) to use for separating the string. The separator is treated as a string or a regular expression. If separator is omitted, the array returned contains one element consisting of the entire string. If separator is an empty string, str is converted to an array of characters.",
            "required": true,
            "default": null
          },
          "regexp": {
            "title": "Regular Expression",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "out": {
            "title": "String parts",
            "type": "array"
          },
          "error": {
            "title": "Error",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Splitting string"
      },
      "description": "Splits a String object into an array of strings by separating the string into substrings.",
      "ns": "string",
      "name": "split",
      "fn": "output = function(cb) {\n\n  try {\n\n    if(input.regexp) {\n\n      var m = input.regexp.match(/^\\/(.*)\\/([gmi]*)/);\n      if(m.length === 3) {\n        var re = new RegExp(m[1], m[2]);\n        cb({ out: input.in.split(re) });\n      } else {\n        cb({ error: ['RegExp not recognized:', input.regexp, 'required format: /..../gm' ].join(' ') });\n      }\n    } else if(input.seperator) {\n      cb({ out: input.in.split(input.seperator) });\n    } else {\n      cb({ error: 'no input seperator or regexp' });\n    }\n\n    done();\n\n  } catch(err) {\n    cb({ error: err });\n    done();\n  }\n\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          },
          "substring": {
            "title": "Substring",
            "type": "string",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Determining whether string starts with {{input.substring}}"
      },
      "description": "Checks whether a string starts with substring",
      "async": true,
      "ns": "string",
      "name": "startsWith",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.startsWith(data, input.substring) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Getting successor"
      },
      "description": "Outputs the successor of this string",
      "async": true,
      "ns": "string",
      "name": "succ",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.succ(data) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Swapping case-based characters"
      },
      "description": "Swap the case of all case-based characters",
      "async": true,
      "ns": "string",
      "name": "swapCase",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.swapCase(data) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Titleizing string"
      },
      "description": "Titleize a string",
      "async": true,
      "ns": "string",
      "name": "titleize",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.titleize(data) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "phrases": {
        "active": "Lowercasing string"
      },
      "description": "Convert string to lowercase",
      "async": true,
      "ns": "string",
      "name": "toLowerCase",
      "fn": "on.input.in = function() {\n  output({ out: data.toLowerCase() });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "phrases": {
        "active": "Uppercasing string"
      },
      "description": "Convert string to uppercase",
      "async": true,
      "ns": "string",
      "name": "toUpperCase",
      "fn": "on.input.in = function() {\n  output({ out: data.toUpperCase() });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          },
          "chars": {
            "title": "Characters",
            "type": "string",
            "default": " ",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Trimming string"
      },
      "description": "trims defined characters from begining and ending of the string. Defaults to whitespace characters.",
      "async": true,
      "ns": "string",
      "name": "trim",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.trim(data, input.chars) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          },
          "length": {
            "title": "Length",
            "type": "number",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Truncating string to a length of {{input.length}}"
      },
      "description": "Truncate a string to the length specified",
      "async": true,
      "ns": "string",
      "name": "truncate",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.truncate(data, input.length) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Underscoring string"
      },
      "description": "Converts a camelized or dasherized string into an underscored one",
      "async": true,
      "ns": "string",
      "name": "underscored",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.underscore(data) });\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "String",
            "type": "string",
            "async": true,
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "require": {
        "underscore.string": "2.x.x"
      },
      "phrases": {
        "active": "Unescaping HTML"
      },
      "description": "Converts entity characters to HTML equivalents",
      "async": true,
      "ns": "string",
      "name": "unescapeHTML",
      "fn": "on.input.in = function() {\n  output({ out: underscore_string.unescapeHTML(data) });\n};\n"
    }
  ],
  "twigs": []
}